AWSTemplateFormatVersion: 2010-09-09
Description: Mikon CloudFormation Demo

# Parameters: Latest Ami Id, Instance Type Parameter, myVPC
# Resouces: AutoScalingGroup, InstanceSecurityGroup, S3 ampari, SQSservice, ALBalancer, ALB security group, ALBTargetGroup
# Outputs: BackupLoadBalancerDNSName


Parameters:
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
#  myVPC:
#    Type: String
#    Default: !GetAtt myVpcSubnetStack.Outputs.MikkoCFVPC
#  myPublicSubnet1:
#    Type: String
#    Default: !GetAtt myVpcSubnetStack.Outputs.PubSub1
#  myPrivateSubnet1:
#    Type: String
#    Default: !GetAtt myVpcSubnetStack.Outputs.PrivateSub1
#  myPrivateSubnet2:
#    Type: String
#    Default: !GetAtt myVpcSubnetStack.Outputs.PrivateSub2

Resources:

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: mikko-asg-cf
      VPCZoneIdentifier:
        - !GetAtt myVpcSubnetStack.Outputs.PubSub1
        - !GetAtt myVpcSubnetStack.Outputs.PrivateSub1
        - !GetAtt myVpcSubnetStack.Outputs.PrivateSub2
      LaunchConfigurationName: !Ref LaunchCinfigMikko
      MaxSize: 3
      MinSize: 1
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 15

  LaunchCinfigMikko:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceTypeParameter
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      KeyName: mikko-kp-frankfurt
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash"
              - "amazon-linux-extras install epel"
              - "amazon-linux-extras install nginx1"
              - "systemctl start nginx"

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: mikko-ec2-sg-cl
      GroupDescription: Allow http to client host
      VpcId: !GetAtt myVpcSubnetStack.Outputs.StackVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBsg
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0


  Ampari:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: mikko-s3-cf
      Tags:
        - Key: Owner
          Value: Mikko

  SQSservice:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: mikko-sqs-cf
      Tags:
        - Key: Owner
          Value: Mikko

  ALBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref ALBsg
      Name: mikko-alb-cf
      Scheme: internet-facing
      Subnets:
        - !GetAtt myVpcSubnetStack.Outputs.PubSub1
        - !GetAtt myVpcSubnetStack.Outputs.PrivateSub2
      Tags:
        - Key: Owner
          Value: Mikko
      Type: application


  ALBsg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup_for_ALB
      GroupName: mikko-alb-sg-cf
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Owner
          Value: Mikko
      VpcId: !GetAtt myVpcSubnetStack.Outputs.StackVPC

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: mikko-alb-targetgroup-cf
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !GetAtt myVpcSubnetStack.Outputs.StackVPC
      Tags:
        - Key: Owner
          Value: Mikko

  ALBlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALBalancer
      Port: 80
      Protocol: HTTP

  myVpcSubnetStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://mikko-cron.s3.eu-west-2.amazonaws.com/vpc_subnet.yaml

Outputs:
  BackupLoadBalancerDNSName:
    Description: The DNSName of the backup load balancer
    Value: !GetAtt ALBalancer.DNSName


#aws cloudformation deploy --template-file luo_s3_ampari.yaml --stack-name mikon-s3-stack